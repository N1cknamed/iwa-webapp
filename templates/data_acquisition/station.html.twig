{% macro weatherIcons(frshtt) %}
    {% set icons = [] %}
    {% if frshtt|slice(0, 1) == '1' %}
        {% set icons = icons|merge(['<i class="bi bi-thermometer-snow" title="Vorst"></i>']) %}
    {% endif %}
    {% if frshtt|slice(1, 1) == '1' %}
        {% set icons = icons|merge(['<i class="bi bi-cloud-rain" title="Regen"></i>']) %}
    {% endif %}
    {% if frshtt|slice(2, 1) == '1' %}
        {% set icons = icons|merge(['<i class="bi bi-snow" title="Sneeuw"></i>']) %}
    {% endif %}
    {% if frshtt|slice(3, 1) == '1' %}
        {% set icons = icons|merge(['<i class="bi bi-cloud-hail" title="Hagel"></i>']) %}
    {% endif %}
    {% if frshtt|slice(4, 1) == '1' %}
        {% set icons = icons|merge(['<i class="bi bi-cloud-lightning" title="Onweer"></i>']) %}
    {% endif %}
    {% if frshtt|slice(5, 1) == '1' %}
        {% set icons = icons|merge(['<i class="bi bi-tornado" title="Tornado"></i>']) %}
    {% endif %}
    {{ icons|join(' ')|raw }}
{% endmacro %}

{% import _self as macros %}

{% extends 'base.html.twig' %}

{% block title %}Station Details{% endblock %}

{% block header %}
    {% include 'header.html.twig' %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet/dist/leaflet.css"/>
{% endblock %}

{% block body %}
    <div class="container-fluid">
        <div class="row mt-3 gx-5 justify-content-center">
            <div class="col-md-3">
                <div class="card text-center">
                    <div id="mapid" class="card-img-top" style="height: 300px;"></div>
                    <div class="card-body">
                        <h3 class="card-title">
                        {% if station.geolocation and station.geolocation.state %}
                            {{ station.geolocation.state }},
                        {% endif %}
                            {{ station.geolocation ? station.geolocation.countryEntity.country : 'N/A' }}
                            ({{ station.geolocation.countryEntity.getCountryCode}})
                        </h3>
                        <p class="card-text">Station ID: {{ station.name }}</p>
                        <p class="card-text">Hoogte: {{ station.elevation }}</p>
                    </div>
                    <ul class="list-group list-group-flush">
                        <a href="#" id="switchToTableViewButton" class="list-group-item list-group-item-action active d-flex justify-content-between align-items-center">
                            <i class="bi bi-caret-right-fill invisible"></i>
                            Tabelweergave
                            <i class="bi bi-caret-right-fill"></i>
                        </a>
                        <a href="#" id="switchToChartViewButton" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                            <i class="bi bi-caret-right-fill invisible"></i>
                            Grafiekweergave
                            <i class="bi bi-caret-right-fill"></i>
                        </a>
                    </ul>
                </div>
            </div>

            <div class="col-md-8">
                <div id="chartView" style="display: none;">
                    <canvas id="weatherChart"></canvas>
                </div>
                <div class="table-responsive">
                    <table class="table table-sm table-borderless table-hover text-center">
                        <thead class="border-bottom">
                        <tr>
                            <th>Datum</th>
                            <th>Tijd</th>
                            <th>Temperatuur</th>
                            <th>Dauwpunt</th>
                            <th>Luchtdruk (Station / Zee)</th>
                            <th>Bewolking</th>
                            <th>Zicht</th>
                            <th>Wind</th>
                            <th>Windrichting</th>
                            <th>Neerslag</th>
                            <th>Sneeuw</th>
                            <th>Evenement</th>
                        </tr>
                        </thead>
                        <tbody>
                        {% set currentDate = '' %}
                        {% for weather in station.weather %}
                            {% set isCorrected = false %}
                            {% set originalTemp = '' %}
                            {% for correctedTemp in correctedTemps %}
                                {% if correctedTemp.DATE == weather.DATE and correctedTemp.TIME == weather.TIME %}
                                    {% set isCorrected = true %}
                                    {% set originalTemp = correctedTemp.getOriginalTEMP() %}
                                {% endif %}
                            {% endfor %}
                            <tr>
                                <td>
                                    {% if currentDate != weather.DATE|date('Y-m-d') %}
                                        {% set currentDate = weather.DATE|date('Y-m-d') %}
                                        {{ currentDate }}
                                    {% endif %}
                                </td>
                                <td>{{ weather.TIME|date('H:i:s') }}</td>
                                <td class="{{ isCorrected ? 'text-success' : '' }}" title="{{ isCorrected ? 'Originele waarde: ' ~ originalTemp ~ '℃' : '' }}">{{ weather.TEMP }}℃</td>
                                <td>{{ weather.DEWP }}℃</td>
                                <td>{{ weather.STP }}hPa / {{ weather.SLP }}hPa</td>
                                <td>{{ weather.CLDC }}%</td>
                                <td>{{ weather.VISIB }}</td>
                                <td>{{ weather.WDSP }}</td>
                                <td>{{ weather.WNDDIR }}°</td>
                                {% if weather.PRCP is null %}
                                    <td></td>
                                {% else %}
                                    <td>{{ weather.PRCP }}cm</td>
                                {% endif %}
                                {% if weather.SNDP is null %}
                                    <td></td>
                                {% else %}
                                    <td>{{ weather.SNDP }}cm</td>
                                {% endif %}
                                <td>{{ macros.weatherIcons(weather.FRSHTT) }}</td>
                            </tr>
                        {% else %}
                        <tr>
                            <td colspan="14">Geen weerdata beschikbaar voor dit station.</td>
                        </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block body_scripts %}
    <script src="https://cdn.jsdelivr.net/npm/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var mymap = L.map('mapid').setView([{{ station.latitude }}, {{ station.longitude }}], 5);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(mymap);

        L.marker([{{ station.latitude }}, {{ station.longitude }}]).addTo(mymap)
            .bindPopup("<b>" + "{{ station.name }}" + "</b><br />" + "{{ station.geolocation ? station.geolocation.countryEntity.country : 'N/A' }}").openPopup();
    </script>
    <script>
        var labels = [];
        var tempData = [];
        var dauwpuntData = [];
        var luchtdrukData = [];
        var luchtdrukZeeData = [];
        var zichtData = [];
        var windData = [];
        var richtingData = [];
        var neerslagData = [];
        var sneeuwData = [];
        var bewolkingData = [];

        {% for weather in station.weather %}
            labels.push('{{ weather.DATE|date('Y-m-d') }}');
            tempData.push({{ weather.TEMP }});
            dauwpuntData.push({{ weather.DEWP }});
            luchtdrukData.push({{ weather.STP }});
            luchtdrukZeeData.push({{ weather.SLP }});
            zichtData.push({{ weather.VISIB }});
            windData.push({{ weather.WDSP }});
            richtingData.push({{ weather.WNDDIR }});
            neerslagData.push({{ weather.PRCP }});
            sneeuwData.push({{ weather.SNDP }});
            bewolkingData.push({{ weather.CLDC }});
        {% endfor %}

        document.getElementById('switchToTableViewButton').addEventListener('click', function(event) {
            event.preventDefault();
            var tableView = document.querySelector('.table-responsive');
            var chartView = document.getElementById('chartView');

            tableView.style.display = 'block';
            chartView.style.display = 'none';

            this.classList.add('active');
            document.getElementById('switchToChartViewButton').classList.remove('active');
        });

        document.getElementById('switchToChartViewButton').addEventListener('click', function(event) {
            event.preventDefault();
            var tableView = document.querySelector('.table-responsive');
            var chartView = document.getElementById('chartView');

            tableView.style.display = 'none';
            chartView.style.display = 'block';

            this.classList.add('active');
            document.getElementById('switchToTableViewButton').classList.remove('active');

            var ctx = document.getElementById('weatherChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Temperatuur',
                        data: tempData,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        yAxisID: 'y2'
                    },
                    {
                        label: 'Dauwpunt',
                        data: dauwpuntData,
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1,
                        yAxisID: 'y2'
                    },
                    {
                        label: 'Luchtdruk',
                        data: luchtdrukData,
                        borderColor: 'rgb(153, 102, 255)',
                        tension: 0.1,
                        yAxisID: 'y1'
                    },
                    {
                        label: 'Luchtdruk op zeeniveau',
                        data: luchtdrukZeeData,
                        borderColor: 'rgb(255, 159, 64)',
                        tension: 0.1,
                        yAxisID: 'y1'
                    },
                    {
                        label: 'Zicht',
                        data: zichtData,
                        borderColor: 'rgb(255, 205, 86)',
                        tension: 0.1,
                        yAxisID: 'y5'
                    },
                    {
                        label: 'Windsnelheid',
                        data: windData,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        yAxisID: 'y4'
                    },
                    // {
                        // label: 'Windrichting', //TODO; windrichting op slimmere manier weergeven
                        // data: richtingData,
                        // borderColor: 'rgb(54, 162, 235)',
                        // tension: 0.1,
                        // yAxisID: 'y1'
                    // },
                    {
                        label: 'Neerslag',
                        data: neerslagData,
                        borderColor: 'rgb(153, 102, 255)',
                        tension: 0.1,
                        yAxisID: 'y3'
                    },
                    {
                        label: 'Sneeuw',
                        data: sneeuwData,
                        borderColor: 'rgb(201, 203, 207)',
                        tension: 0.1,
                        yAxisID: 'y3'
                    },
                    {
                        label: 'Bewolking',
                        data: bewolkingData,
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1,
                        yAxisID: 'y0'
                    }]
                },
                options: {
                    animation: false,
                    scales: {
                        y0: {
                            beginAtZero: true,
                            display: true,
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return value + '%';
                                }
                            }
                        },
                        y1: {
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false,
                            },
                            display: true,
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return value + ' hPa';
                                }
                            }
                        },
                        y2: {
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false,
                            },
                            display: true,
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return value + '°C';
                                }
                            }
                        },
                        y3: {
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false,
                            },
                            display: true,
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return value + 'cm';
                                }
                            }
                        },
                        y4: {
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false,
                            },
                            display: true,
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return value + 'm/s';
                                }
                            }
                        },
                        y5: {
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false,
                            },
                            display: true,
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return value + 'km';
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 15,
                                font: {
                                    size: 13 // Change the font size to 14
                                }
                            },
                            onClick: getChartLegendConfig().onClick
                        }
                    }
                }
            });
        });
        function getChartLegendConfig() {
            return {
                onClick: function(event, legendItem) {
                    var chart = this.chart;
                    var datasetIndex = legendItem.datasetIndex;

                    // Toggle the visibility of the dataset
                    var meta = chart.getDatasetMeta(datasetIndex);
                    meta.hidden = meta.hidden === null ? !chart.data.datasets[datasetIndex].hidden : null;

                    // Get the yAxisID of the clicked dataset
                    var yAxisID = chart.data.datasets[datasetIndex].yAxisID;

                    // Check if all datasets that use the same yAxisID are hidden
                    var allHidden = true;
                    for (var i = 0; i < chart.data.datasets.length; i++) {
                        var otherMeta = chart.getDatasetMeta(i);
                        if (chart.data.datasets[i].yAxisID === yAxisID && otherMeta.hidden === null) {
                            allHidden = false;
                            break;
                        }
                    }

                    // If all datasets that use the same yAxisID are hidden, hide the y-axis. Otherwise, show it.
                    chart.options.scales[yAxisID].display = !allHidden;

                    chart.update();
                }
            };
        }
    </script>
    {{ parent() }}
{% endblock %}