{% extends 'base.html.twig' %}

{% block title %}Data Acquisition{% endblock %}

{% block header %}
    {% include 'header.html.twig' %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css"/>
    <link rel="stylesheet" href="https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css"/>

    <style>
        tr[data-href]:hover {
            cursor: pointer;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
{% endblock %}

{% block body %}
    <h2>Stations</h2>
    <div class="col-md-6">
        <table class="table table-sm">
            <thead>
            <tr>
                <th class="col-md-2">ID</th>
                <th class="col-md-4">Land</th>
                <th class="col-md-6">Staat / Provincie</th>
                <th class="col-md-4">Plaats</th>
            </tr>
            </thead>
            <tbody id="station-table-body">
            {% for station in stations %}
                <tr>
                    <td>
                        <a href="{{ path('app_station_detail', {'name': station.name}) }}">{{ station.name }}</a>
                    </td>
                    <td>{{ station.geolocation ? station.geolocation.countryEntity.country : 'N/A' }}
                        ({{ station.geolocation ? station.geolocation.countryEntity.getCountryCode : '' }})
                    </td>
                    <td>{{ station.geolocation ? station.geolocation.state : 'N/A' }}</td>
                    <td>{{ station.geolocation ? (station.geolocation.city ? station.geolocation.city : station.geolocation.village) : 'N/A' }}</td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="6">No stations found</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>

        <nav>
            <ul class="pagination justify-content-center" id="pagination-links">
                <li class="page-item{% if current_page == 1 %} disabled{% endif %}">
                    <a class="page-link" href="{{ path('app_data_acquisition', {'page': 1}) }}">Eerste</a>
                </li>

                <li class="page-item{% if current_page == 1 %} disabled{% endif %}">
                    <a class="page-link"
                       href="{{ path('app_data_acquisition', {'page': current_page - 1}) }}">Vorige</a>
                </li>

                {% set start_page = max(1, current_page - 2) %}
                {% set end_page = min(total_pages, start_page + 4) %}
                {% set start_page = max(1, end_page - 4) %}

                {% for page in start_page..end_page %}
                    <li class="page-item{% if page == current_page %} active{% endif %}">
                        <a class="page-link"
                           href="{{ path('app_data_acquisition', {'page': page}) }}">{{ page }}</a>
                    </li>
                {% endfor %}

                <li class="page-item{% if current_page == total_pages %} disabled{% endif %}">
                    <a class="page-link"
                       href="{{ path('app_data_acquisition', {'page': current_page + 1}) }}">Volgende</a>
                </li>

                <li class="page-item{% if current_page == total_pages %} disabled{% endif %}">
                    <a class="page-link" href="{{ path('app_data_acquisition', {'page': total_pages}) }}">Laatste</a>
                </li>
            </ul>
        </nav>
    </div>
    <div class="col-md-4">
        <div id="map" style="height: 600px;"></div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-header text-center">
                <h5 class="card-title">Actuele storingen</h5>
            </div>
                {% if malfunctions is empty %}
                    <p>Geen actieve storingen.</p>
                {% else %}
                    <div class="list-group list-group-flush">
                        {% for malfunction in malfunctions %}
                            <a href="{{ path('malfunction_detail', {'name': malfunction.getStation().getName()}) }}" class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between">
                                    <p class="mb-1">
                                        {% if malfunction.getStatus() == 'unresolved' %}
                                            <span class="badge rounded-pill bg-danger">{{ malfunction.getStatus() }}</span>
                                        {% elseif malfunction.getStatus() == 'in progress' %}
                                            <span class="badge rounded-pill bg-warning">{{ malfunction.getStatus() }}</span>
                                        {% else %}
                                            <span class="badge rounded-pill bg-secondary">{{ malfunction.getStatus() }}</span>
                                        {% endif %}
                                    </p>
                                    <small>{{ malfunction.getDATE() }}</small>
                                </div>
                                <p class="mb-1">{{ malfunction.getStation().getName() }}, {{ malfunction.getStation().geolocation.countryEntity.country }}</p>
                            </a>
                        {% endfor %}
                        <a class="list-group-item list-group-item-action text-primary text-center" href="{{ path('app_malfunction') }}">Alle storingen</a>
                    </div>
                {% endif %}
        </div>
    </div>
{% endblock %}

{% block body_scripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>

    <script> //clickable table rows
        document.addEventListener('DOMContentLoaded', function() {
            var rows = document.querySelectorAll('tr[data-href]');
            rows.forEach(function(row) {
                row.addEventListener('click', function() {
                    window.location.href = row.getAttribute('data-href');
                });
            });
        });
    </script>

    <script> // Leaflet map
        var data = localStorage.getItem('stationData');
        if (data) {
            initializeMap(JSON.parse(data));
        } else {
            // If the data is not in local storage, fetch it
            fetch('/dataacquisition/locations')
                .then(response => response.json())
                .then(data => {
                    localStorage.setItem('stationData', JSON.stringify(data));
                    initializeMap(data);
                });
        }

        function initializeMap(data) {
            var map = L.map('map').setView([0, 0], 2);

            // set bounds so you can't pan outside the world
            var bounds = L.latLngBounds(
                L.latLng(-90, -180),
                L.latLng(90, 180)
            );
            var paddedBounds = bounds.pad(0.1);
            map.setMaxBounds(paddedBounds);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 15,
                minZoom: 2,
            }).addTo(map);

            var markers = L.markerClusterGroup({
                showCoverageOnHover: false,
            });
            data.forEach(station => {
                var marker = L.marker([station.latitude, station.longitude])
                    .bindPopup("<b><a href='/dataacquisition/station/" + station.name + "'>" + station.name + "</a></b>");
                markers.addLayer(marker);
            });
            map.addLayer(markers);
        }
    </script>
    <script> // Pagination AJAX
        document.getElementById('pagination-links').addEventListener('click', function(event) {
            event.preventDefault();

            var target = event.target;
            if (target.tagName.toLowerCase() === 'a') {
                var url = target.getAttribute('href');

                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        var parser = new DOMParser();
                        var doc = parser.parseFromString(html, 'text/html');

                        var newTableBody = doc.getElementById('station-table-body');
                        document.getElementById('station-table-body').innerHTML = newTableBody.innerHTML;

                        var newPaginationLinks = doc.getElementById('pagination-links');
                        document.getElementById('pagination-links').innerHTML = newPaginationLinks.innerHTML;
                    });
            }
        });
    </script>
{% endblock %}
