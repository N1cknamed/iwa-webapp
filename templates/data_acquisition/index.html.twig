{% extends 'base.html.twig' %}

{% block title %}Data Acquisition{% endblock %}

{% block header %}
    {% include 'header.html.twig' %}
{% endblock %}

{% block body %}
    <div class="container">
        <div class="row">
            <h1>Stations</h1>
            <div class="col-md-5">
                <table class="table">
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Land</th>
                        <th>Staat</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for station in stations %}
                        <tr>
                            <td>
                                <a href="{{ path('app_station_detail', {'name': station.name}) }}">{{ station.name }}</a>
                            </td>
                            <td>{{ station.geolocation ? station.geolocation.countryEntity.country : 'N/A' }} ({{ station.geolocation ? station.geolocation.countryEntity.getCountryCode : '' }})</td>
                            <td>{{ station.geolocation ? station.geolocation.state : 'N/A' }}</td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="6">No stations found</td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>

                <nav>
                    <ul class="pagination">
                        {# "Previous" button #}
                        <li class="page-item{% if current_page == 1 %} disabled{% endif %}">
                            <a class="page-link" href="{{ path('app_data_acquisition', {'page': current_page - 1}) }}">Vorige</a>
                        </li>

                        {# Calculate start and end page numbers for the 5-page range #}
                        {% set start_page = max(1, current_page - 2) %}
                        {% set end_page = min(total_pages, start_page + 4) %}
                        {% set start_page = max(1, end_page - 4) %}

                        {# Page number buttons #}
                        {% for page in start_page..end_page %}
                            <li class="page-item{% if page == current_page %} active{% endif %}">
                                <a class="page-link"
                                   href="{{ path('app_data_acquisition', {'page': page}) }}">{{ page }}</a>
                            </li>
                        {% endfor %}

                        {# "Next" button #}
                        <li class="page-item{% if current_page == total_pages %} disabled{% endif %}">
                            <a class="page-link" href="{{ path('app_data_acquisition', {'page': current_page + 1}) }}">Volgende</a>
                        </li>
                    </ul>
                </nav>
            </div>
            <div class="col-md-7">
                <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
                <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
                <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css"/>
                <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>
                <link rel="stylesheet" href="https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.css"/>
                <link rel="stylesheet"
                      href="https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css"/>

                <div id="map" style="height: 600px;"></div>

                <script>
                    // Create a new Leaflet map
                    var map = L.map('map').setView([0, 0], 2);  // Set initial view to [0, 0] and zoom level 2

                    // Set the maximum bounds
                    var bounds = L.latLngBounds(
                        L.latLng(-90, -180),  // South-west corner
                        L.latLng(90, 180)     // North-east corner
                    );

                    // Extend the bounds by 10%
                    var paddedBounds = bounds.pad(0.1);

                    // Apply the padded bounds
                    map.setMaxBounds(paddedBounds);

                    // Add a tile layer to the map (OpenStreetMap)
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        maxZoom: 15,
                        minZoom: 2,
                    }).addTo(map);

                    // Create a new MarkerClusterGroup
                    var markers = L.markerClusterGroup();

                    // Fetch the station data
                    fetch('/dataacquisition/locations')
                        .then(response => response.json())
                        .then(data => {
                            // Add a marker for each station
                            data.forEach(station => {
                                var marker = L.marker([station.latitude, station.longitude])
                                    .bindPopup("<b><a href='/dataacquisition/station/" + station.name + "'>" + station.name + "</a></b>");
                                markers.addLayer(marker);  // Add the marker to the MarkerClusterGroup
                            });

                            map.addLayer(markers);  // Add the MarkerClusterGroup to the map
                        });
                </script>
            </div>
        </div>

    </div>
{% endblock %}